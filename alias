# -- logcat related ------------------------

alias log='adb logcat -v threadtime -v color'

function logtee() {
    log | tee $1
}

function logpid() {
    log --pid=$1
}

function logpkg() {
    log --pid=$(adb shell pidof $1)
}

# -- logcat related end --------------------

# -- bugreport related ------------------------

## grep logs in bugreport
function loggrep() {
   if [ -f logcat ];then
     find . -name 'logcat*' -printf "%P\n" | sort -t '.' -k2nr | xargs grep "$(for arg in "$@"; do echo -n "${arg}\|"; done | sed 's/..$//')"
   elif [ -d FS/data/misc/logd ];then
     cd FS/data/misc/logd
     find . -name 'logcat*' -printf "%P\n" | sort -t '.' -k2nr | xargs grep "$(for arg in "$@"; do echo -n "${arg}\|"; done | sed 's/..$//')"
     cd -
   fi
}
function logegrep() {
   if [ -f logcat ];then
     find . -name 'logcat*' -printf "%P\n" | sort -t '.' -k2nr | xargs egrep "$1"
   elif [ -d FS/data/misc/logd ];then
     cd FS/data/misc/logd
     find . -name 'logcat*' -printf "%P\n" | sort -t '.' -k2nr | xargs egrep "$1"
     cd -
   fi
}

# print dumpsys service from bugreport
function printser() {
  name=${1//\./\\.}
  name=${1//\//\\/}
  file="$(ls bugreport-*.txt | sort -V | tail -n1)"
  sed -n "/^SERVICE .*$name/,/^SERVICE/p" $file
}

# print dumpsys package from bugreport
function printpkg() {
  name=${1//\./\\.}
  name=${1//\//\\/}
  file="$(ls bugreport-*.txt | sort -V | tail -n1)"
  sed -n "/^  Package \[.*$name\]/,/^  Package /p" $file
}

# -- bugreport related end --------------------

# -- flash -----------------------------------

function flash_if_exist() {
    img=$1
    file=$2
    if [ -f $file ]; then
        fastboot flash $img $file
    fi
}

function check_board_matched() {
if [ -f $1/android-info.txt ]; then
    required_board=$(grep board $1/android-info.txt | awk -F= '{print $2}')
    board=$(adb shell getprop ro.product.device)
    if [[ $required_board != $board ]]; then
       echo "The images for $required_board are not matched with $board"
       return -1
    else
       return 0
    fi
else
  echo "android-info.txt not exist, skip board check!"
  return 0
fi

}

function flash() {
  DIR="."
  if [ $ANDROID_PRODUCT_OUT ]; then
    DIR=$ANDROID_PRODUCT_OUT
  fi

  check_matched=1
  wipedata=0
  disable_verity=0
  flash_bootloader=0
  for item in $*; do
    if [[ "$item" == '-w' ]]; then
      wipedata=1
    fi
    if [[ $item == '-d' ]]; then
      disable_verity=1
    fi
    if [[ $item == '-b' ]]; then
      flash_bootloader=1
    fi
    if [[ $item == '-nocheck' ]]; then
      check_matched=0
    fi
    if [[ $item != "-"* ]]; then
      DIR=$item
    fi
  done

  echo "flash $DIR"

  if [[ $check_matched != 0 ]];then
    check_board_matched $DIR
    if [[ $? != 0 ]];then
       return -1
    fi
  fi

  adb reboot bootloader

  if [[ $flash_bootloader == 1 ]]; then
     flash_if_exist bootloader $DIR/bootloader.img
     fastboot reboot bootloader
  fi
  flash_if_exist dtbo $DIR/dtbo.img

  if [[ $disable_verity == 1 ]]; then
    echo -e "\n\n disable verity ........\n\n"
    fastboot --disable-verity --disable-verification flash vbmeta $DIR/vbmeta.img
  else
    flash_if_exist vbmeta $DIR/vbmeta.img
  fi

  flash_if_exist vbmeta_system $DIR/vbmeta_system.img
  flash_if_exist boot $DIR/boot.img
  flash_if_exist recovery $DIR/recovery.img
  if [[ -f $DIR/super.img ]]; then
      flash_if_exist super $DIR/super.img
  else
      flash_if_exist system $DIR/system.img
      flash_if_exist vendor $DIR/vendor.img
      flash_if_exist product $DIR/product.img
  fi

  if [[ $wipedata == 1 ]]; then
    fastboot -w
  fi

  fastboot reboot
}

# -- flash end  -----------------------------------

function mkbootanimation() {
   # Save the original directory
   original_dir=$(pwd)

   if [ -z "$1" ]; then
      workdir=$(pwd)
   elif [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
      echo "Usage: mkbootanimation [workdir]"
      echo "  workdir: The directory containing the boot animation files. If not specified, the current directory will be used."
      # Return to the original directory
      cd "$original_dir"
      return
   else
      workdir=$(realpath "$1")
   fi

   dirs=$(ls "$workdir")
   for dir in $dirs; do
       if [ ! -d "$workdir/$dir" ]; then
          continue
       fi
       echo "PNG compression for pngs in $workdir/$dir"
       cd "$workdir/$dir"
       for fn in *.png ; do pngcrush -q ${fn} ${fn}.new && mv -f ${fn}.new ${fn}; done
       pngquant --force --ext .png *.png
       cd "$workdir"
   done
   cd "$workdir"
   echo "start zip ...."
   # Output the zip file to the current directory
   zip -0qry "$original_dir/bootanimation.zip" * -x "*.zip"
   echo "done in $original_dir/bootanimation.zip"

   # Return to the original directory
   cd "$original_dir"
}

# unpack ramdisk to current dir
function unpack_ramdisk()
{
  gunzip -c $1 | cpio -idm
}
